/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateOcorrenciaArgs } from "./CreateOcorrenciaArgs";
import { UpdateOcorrenciaArgs } from "./UpdateOcorrenciaArgs";
import { DeleteOcorrenciaArgs } from "./DeleteOcorrenciaArgs";
import { OcorrenciaFindManyArgs } from "./OcorrenciaFindManyArgs";
import { OcorrenciaFindUniqueArgs } from "./OcorrenciaFindUniqueArgs";
import { Ocorrencia } from "./Ocorrencia";
import { AlunoFindManyArgs } from "../../aluno/base/AlunoFindManyArgs";
import { Aluno } from "../../aluno/base/Aluno";
import { OcorrenciaService } from "../ocorrencia.service";

@graphql.Resolver(() => Ocorrencia)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class OcorrenciaResolverBase {
  constructor(
    protected readonly service: OcorrenciaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "read",
    possession: "any",
  })
  async _ocorrenciasMeta(
    @graphql.Args() args: OcorrenciaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Ocorrencia])
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "read",
    possession: "any",
  })
  async ocorrencias(
    @graphql.Args() args: OcorrenciaFindManyArgs
  ): Promise<Ocorrencia[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Ocorrencia, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "read",
    possession: "own",
  })
  async ocorrencia(
    @graphql.Args() args: OcorrenciaFindUniqueArgs
  ): Promise<Ocorrencia | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ocorrencia)
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "create",
    possession: "any",
  })
  async createOcorrencia(
    @graphql.Args() args: CreateOcorrenciaArgs
  ): Promise<Ocorrencia> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Ocorrencia)
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "update",
    possession: "any",
  })
  async updateOcorrencia(
    @graphql.Args() args: UpdateOcorrenciaArgs
  ): Promise<Ocorrencia | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Ocorrencia)
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "delete",
    possession: "any",
  })
  async deleteOcorrencia(
    @graphql.Args() args: DeleteOcorrenciaArgs
  ): Promise<Ocorrencia | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Aluno])
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "read",
    possession: "any",
  })
  async alunos(
    @graphql.Parent() parent: Ocorrencia,
    @graphql.Args() args: AlunoFindManyArgs
  ): Promise<Aluno[]> {
    const results = await this.service.findAlunos(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
