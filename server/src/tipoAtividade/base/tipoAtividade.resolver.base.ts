/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTipoAtividadeArgs } from "./CreateTipoAtividadeArgs";
import { UpdateTipoAtividadeArgs } from "./UpdateTipoAtividadeArgs";
import { DeleteTipoAtividadeArgs } from "./DeleteTipoAtividadeArgs";
import { TipoAtividadeFindManyArgs } from "./TipoAtividadeFindManyArgs";
import { TipoAtividadeFindUniqueArgs } from "./TipoAtividadeFindUniqueArgs";
import { TipoAtividade } from "./TipoAtividade";
import { ParticipacaoAtividadeFindManyArgs } from "../../participacaoAtividade/base/ParticipacaoAtividadeFindManyArgs";
import { ParticipacaoAtividade } from "../../participacaoAtividade/base/ParticipacaoAtividade";
import { TipoAtividadeService } from "../tipoAtividade.service";

@graphql.Resolver(() => TipoAtividade)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class TipoAtividadeResolverBase {
  constructor(
    protected readonly service: TipoAtividadeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "read",
    possession: "any",
  })
  async _tipoAtividadesMeta(
    @graphql.Args() args: TipoAtividadeFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [TipoAtividade])
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "read",
    possession: "any",
  })
  async tipoAtividades(
    @graphql.Args() args: TipoAtividadeFindManyArgs
  ): Promise<TipoAtividade[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => TipoAtividade, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "read",
    possession: "own",
  })
  async tipoAtividade(
    @graphql.Args() args: TipoAtividadeFindUniqueArgs
  ): Promise<TipoAtividade | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TipoAtividade)
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "create",
    possession: "any",
  })
  async createTipoAtividade(
    @graphql.Args() args: CreateTipoAtividadeArgs
  ): Promise<TipoAtividade> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => TipoAtividade)
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "update",
    possession: "any",
  })
  async updateTipoAtividade(
    @graphql.Args() args: UpdateTipoAtividadeArgs
  ): Promise<TipoAtividade | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TipoAtividade)
  @nestAccessControl.UseRoles({
    resource: "TipoAtividade",
    action: "delete",
    possession: "any",
  })
  async deleteTipoAtividade(
    @graphql.Args() args: DeleteTipoAtividadeArgs
  ): Promise<TipoAtividade | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ParticipacaoAtividade])
  @nestAccessControl.UseRoles({
    resource: "ParticipacaoAtividade",
    action: "read",
    possession: "any",
  })
  async participacaoAtividades(
    @graphql.Parent() parent: TipoAtividade,
    @graphql.Args() args: ParticipacaoAtividadeFindManyArgs
  ): Promise<ParticipacaoAtividade[]> {
    const results = await this.service.findParticipacaoAtividades(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
