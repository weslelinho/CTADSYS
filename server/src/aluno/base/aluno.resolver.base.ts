/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAlunoArgs } from "./CreateAlunoArgs";
import { UpdateAlunoArgs } from "./UpdateAlunoArgs";
import { DeleteAlunoArgs } from "./DeleteAlunoArgs";
import { AlunoFindManyArgs } from "./AlunoFindManyArgs";
import { AlunoFindUniqueArgs } from "./AlunoFindUniqueArgs";
import { Aluno } from "./Aluno";
import { OcorrenciaFindManyArgs } from "../../ocorrencia/base/OcorrenciaFindManyArgs";
import { Ocorrencia } from "../../ocorrencia/base/Ocorrencia";
import { ParticipacaoAtividadeFindManyArgs } from "../../participacaoAtividade/base/ParticipacaoAtividadeFindManyArgs";
import { ParticipacaoAtividade } from "../../participacaoAtividade/base/ParticipacaoAtividade";
import { AlunoService } from "../aluno.service";

@graphql.Resolver(() => Aluno)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class AlunoResolverBase {
  constructor(
    protected readonly service: AlunoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "read",
    possession: "any",
  })
  async _alunosMeta(
    @graphql.Args() args: AlunoFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Aluno])
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "read",
    possession: "any",
  })
  async alunos(@graphql.Args() args: AlunoFindManyArgs): Promise<Aluno[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Aluno, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "read",
    possession: "own",
  })
  async aluno(
    @graphql.Args() args: AlunoFindUniqueArgs
  ): Promise<Aluno | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Aluno)
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "create",
    possession: "any",
  })
  async createAluno(@graphql.Args() args: CreateAlunoArgs): Promise<Aluno> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Aluno)
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "update",
    possession: "any",
  })
  async updateAluno(
    @graphql.Args() args: UpdateAlunoArgs
  ): Promise<Aluno | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Aluno)
  @nestAccessControl.UseRoles({
    resource: "Aluno",
    action: "delete",
    possession: "any",
  })
  async deleteAluno(
    @graphql.Args() args: DeleteAlunoArgs
  ): Promise<Aluno | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Ocorrencia])
  @nestAccessControl.UseRoles({
    resource: "Ocorrencia",
    action: "read",
    possession: "any",
  })
  async ocorrencia(
    @graphql.Parent() parent: Aluno,
    @graphql.Args() args: OcorrenciaFindManyArgs
  ): Promise<Ocorrencia[]> {
    const results = await this.service.findOcorrencia(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [ParticipacaoAtividade])
  @nestAccessControl.UseRoles({
    resource: "ParticipacaoAtividade",
    action: "read",
    possession: "any",
  })
  async participacaoAtividades(
    @graphql.Parent() parent: Aluno,
    @graphql.Args() args: ParticipacaoAtividadeFindManyArgs
  ): Promise<ParticipacaoAtividade[]> {
    const results = await this.service.findParticipacaoAtividades(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
